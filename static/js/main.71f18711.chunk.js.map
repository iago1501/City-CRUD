{"version":3,"sources":["store/ducks/place.js","store/ducks/city.js","components/LocationActions/index.jsx","store/ducks/form.js","components/LocationList/index.jsx","components/LocationForm/LocationTextField.jsx","components/LocationForm/LocationFormActions.jsx","components/LocationForm/index.jsx","components/Places/index.jsx","components/Cities/index.jsx","components/CitiesAndPlacesContainer/index.jsx","components/GeoChart/index.jsx","pages/Home.jsx","pages/App.js","store/ducks/root-reducer.js","store/store.js","index.js"],"names":["selectPlaces","state","place","places","selectSelectedPlace","selectedPlace","placeMaxId","createSelector","map","id","sort","a","b","Types","INITIAL_STATE","name","removePlace","type","payload","placeReducer","action","find","filter","selectCities","city","cities","selectSelectedCity","selectedCity","selectedCitiesByPlace","_","placeId","cityMaxId","cityReducer","LocationActions","formType","value","dispatch","useDispatch","IconButton","onClick","updatePlace","updateCity","aria-label","size","style","color","removeCity","selectSearchedPlace","form","SearchedPlace","selectSearchedCity","SearchedCity","formReducer","useStyles","makeStyles","theme","list","width","backgroundColor","palette","background","paper","height","overflowY","padding","spacing","textAlign","text","secondary","input","marginLeft","LocationList","locations","changeLocale","selected","classes","useState","inputValue","setInputValue","searchedPlace","useSelector","searchedCity","filteredLocations","location","toLowerCase","includes","Paper","elevation","className","List","component","ListItem","button","key","ListItemText","inset","primary","TextField","onChange","e","target","defaultValue","flex","LocationTextField","placeholder","handleChangeText","changeCity","InputBase","inputProps","iconButton","divider","margin","LocationFormActions","nextIdCity","parseInt","nextIdPlace","selectedPlaceId","AddDispatchFunction","addCity","Divider","orientation","root","display","alignItems","marginBottom","LocationForm","Places","handleChangePlace","useCallback","changePlace","Grid","item","xs","Cities","handleChangeCity","length","flexGrow","CitiesAndPlacesContainer","container","marginTop","GeoChart","placesData","justifySelf","chartType","loader","data","options","chart","title","subtitle","Home","App","Container","fixed","persistConfig","storage","whitelist","rootReducer","combineReducers","persistReducer","middleWares","logger","multi","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71f18711.chunk.js","sourcesContent":["// Selectors\nimport { createSelector } from 'reselect';\n\nexport const selectPlaces = (state) => state.place.places;\nexport const selectSelectedPlace = (state) => state.place.selectedPlace;\n\nexport const placeMaxId = createSelector(\n    [selectPlaces],\n    (places) => places.map((place) => place.id).sort((a, b) => b - a)[0]\n);\n\n// Action Types\n\nexport const Types = {\n    ADD_PLACE: 'places/ADD_PLACE',\n    CHANGE_PLACE: 'places/CHANGE_PLACE',\n    REMOVE_PLACE: 'places/REMOVE_PLACE',\n    UPDATE_PLACE: 'update/UPDATE_PLACE',\n};\n\n// Reducer\n\nconst INITIAL_STATE = {\n    selectedPlace: '',\n    places: [\n        {\n            id: 1,\n            name: 'Rio de Janeiro',\n        },\n        {\n            id: 2,\n            name: 'São Paulo',\n        },\n    ],\n};\n\nconst placeReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case Types.ADD_PLACE:\n            return {\n                ...state,\n                places:\n                    state.places.find(\n                        (place) => place.name === action.payload.name\n                    )\n                        ? [...state.places]\n                        : [...state.places, { ...action.payload }],\n            };\n        case Types.REMOVE_PLACE:\n            return {\n                ...state,\n                selectedPlace: '',\n                places: state.places.filter(\n                    (place) => place.id !== action.payload\n                ),\n            };\n        case Types.UPDATE_PLACE:\n            return {\n                ...state,\n                selectedPlace: '',\n                places: state.places.map((place) =>\n                    place.id === action.payload.id\n                        ? { ...action.payload }\n                        : place\n                ),\n            };\n        case Types.CHANGE_PLACE:\n            return {\n                ...state,\n                selectedPlace: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\n// Action Creators\n\nexport const addPlace = (id, name) => ({\n    type: Types.ADD_PLACE,\n    payload: { id, name },\n});\n\nexport const changePlace = (id, name) => ({\n    type: Types.CHANGE_PLACE,\n    payload: { id, name },\n});\n\nexport const updatePlace = (id, name) => ({\n    type: Types.UPDATE_PLACE,\n    payload: { id, name },\n});\n\nexport const removePlace = (id) => ({\n    type: Types.REMOVE_PLACE,\n    payload: id,\n});\n\nexport default placeReducer;\n","// Selectors\nimport { createSelector } from 'reselect';\n\nexport const selectCities = (state) => state.city.cities;\n\nexport const selectSelectedCity = (state) => state.city.selectedCity;\n\nexport const selectedCitiesByPlace = createSelector(\n    [selectCities, (_, placeId) => placeId],\n    (cities, placeId) => cities.filter((city) => city.placeId === placeId)\n);\n\nexport const cityMaxId = createSelector(\n    [selectCities],\n    (cities) => cities.map((city) => city.id).sort((a, b) => b - a)[0]\n);\n\n// Action Types\n\nexport const Types = {\n    ADD_CITY: 'city/ADD_CITY',\n    REMOVE_CITY: 'city/REMOVE_CITY',\n    REMOVE_CITY_BY_PLACE_ID: 'city/REMOVE_CITY_BY_PLACE_ID',\n    UPDATE_CITY: 'city/UPDATE_CITY',\n    CHANGE_CITY: 'city/CHANGE_CITY',\n};\n\n// Reducer\n\nconst INITIAL_STATE = {\n    selectedCity: '',\n    cities: [\n        {\n            id: 2,\n            placeId: 1,\n            name: 'Rio de Janeiro',\n        },\n        {\n            id: 3,\n            placeId: 1,\n            name: 'Niterói',\n        },\n        {\n            id: 4,\n            placeId: 1,\n            name: 'Nilópolis',\n        },\n        {\n            id: 6,\n            placeId: 2,\n            name: 'São Paulo',\n        },\n        {\n            id: 7,\n            placeId: 2,\n            name: 'Ribeirao Preto',\n        },\n    ],\n};\n\nconst cityReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case Types.ADD_CITY:\n            return {\n                ...state,\n                cities:\n                    state.cities.find(\n                        (city) => (city.name === action.payload.name && city.placeId === action.payload.placeId )\n                    )\n                        ? [...state.cities]\n                        : [...state.cities, { ...action.payload }],\n            };\n        case Types.REMOVE_CITY:\n            return {\n                ...state,\n                cities: state.cities.filter(\n                    (city) => city.id !== action.payload\n                ),\n            };\n        case Types.CHANGE_CITY:\n            return {\n                ...state,\n                selectedCity: action.payload,\n            };\n        case Types.UPDATE_CITY:\n            return {\n                ...state,\n                selectedCity: '',\n                cities: state.cities.map((city) =>\n                    city.id === action.payload.id ? { placeId: city.placeId, ...action.payload } : city\n                ),\n            };\n        case Types.REMOVE_CITY_BY_PLACE_ID:\n            return {\n                ...state,\n                cities: state.cities.filter(\n                    (city) => city.placeId !== action.payload\n                ),\n            };\n        default:\n            return state;\n    }\n};\n\n// Action Creators\n\nexport const addCity = (id, placeId, name) => ({\n    type: Types.ADD_CITY,\n    payload: { id, placeId, name },\n});\n\nexport const removeCity = (id) => ({\n    type: Types.REMOVE_CITY,\n    payload: id,\n});\n\nexport const updateCity = (id, name) => ({\n    type: Types.UPDATE_CITY,\n    payload: { id, name },\n});\n\nexport const changeCity = (id, name) => ({\n    type: Types.CHANGE_CITY,\n    payload: { id, name },\n});\n\nexport const removeCityByPlaceId = (placeId) => ({\n    type: Types.REMOVE_CITY_BY_PLACE_ID,\n    payload: placeId,\n});\n\nexport default cityReducer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { IconButton } from '@material-ui/core';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport { removePlace, updatePlace } from 'store/ducks/place';\nimport { removeCity, removeCityByPlaceId, updateCity } from 'store/ducks/city';\n\nconst LocationActions = ({ id, formType, value }) => {\n    const dispatch = useDispatch();\n    return (\n        <>\n            <IconButton\n                onClick={() =>\n                    formType === 'Place'\n                        ? dispatch(updatePlace(id, value))\n                        : dispatch(updateCity(id, value))\n                }\n                aria-label=\"directions\"\n                size=\"small\"\n            >\n                <UpdateIcon style={{ color: 'orange' }} />\n            </IconButton>\n            <IconButton\n                onClick={() =>\n                    formType === 'Place'\n                        ? dispatch([removePlace(id), removeCityByPlaceId(id)])\n                        : dispatch(removeCity(id))\n                }\n                color=\"secondary\"\n                aria-label=\"directions\"\n                size=\"small\"\n            >\n                <DeleteIcon />\n            </IconButton>\n        </>\n    );\n};\n\nexport default LocationActions;\n","export const selectSearchedPlace = (state) => state.form.SearchedPlace;\nexport const selectSearchedCity = (state) => state.form.SearchedCity;\n\n// Action Types\n\nexport const Types = {\n    CHANGE_PLACE: 'form/CHANGE_PLACE',\n    CHANGE_CITY: 'form/CHANGE_CITY',\n};\n\n// Reducer\n\nconst INITIAL_STATE = {\n    SearchedPlace: '',\n    SearchedCity: '',\n};\n\nconst formReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case Types.CHANGE_PLACE:\n            return {\n                ...state,\n                SearchedPlace: action.payload,\n            };\n        case Types.CHANGE_CITY:\n            return {\n                ...state,\n                SearchedCity: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\n// Action Creators\n\nexport const changePlace = (name) => ({\n    type: Types.CHANGE_PLACE,\n    payload: name,\n});\n\nexport const changeCity = (name) => ({\n    type: Types.CHANGE_CITY,\n    payload: name,\n});\n\nexport default formReducer;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    Paper,\n    List,\n    ListItem,\n    ListItemText,\n    TextField,\n} from '@material-ui/core';\n\nimport LocationActions from '../LocationActions';\n\nimport { selectSearchedPlace, selectSearchedCity } from 'store/ducks/form';\n\nconst useStyles = makeStyles((theme) => ({\n    list: {\n        width: '100%',\n        backgroundColor: theme.palette.background.paper,\n        height: '200px',\n        overflowY: 'auto',\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    input: {\n        width: '90%',\n        marginLeft: '10%',\n    },\n}));\n\nconst LocationList = ({ locations, changeLocale, selected, formType }) => {\n    const classes = useStyles();\n    const [inputValue, setInputValue] = useState();\n    const searchedPlace = useSelector(selectSearchedPlace);\n    const searchedCity = useSelector(selectSearchedCity);\n\n    const filteredLocations =\n        formType === 'Place'\n            ? locations.filter((location) =>\n                  location.name\n                      .toLowerCase()\n                      .includes(searchedPlace.toLowerCase())\n              )\n            : locations.filter((location) =>\n                  location.name\n                      .toLowerCase()\n                      .includes(searchedCity.toLowerCase())\n              );\n\n\n    return (\n        <Paper elevation={3} className={classes.paper}>\n            <List\n                component=\"nav\"\n                className={classes.list}\n                aria-label=\"location\"\n            >\n                {locations &&\n                    filteredLocations.map(({ id, name }) => (\n                        <ListItem button key={id} selected={selected === id}>\n                            {selected !== id ? (\n                                <ListItemText\n                                    inset\n                                    primary={name}\n                                    onClick={() => {\n                                        changeLocale(id, name);\n                                        setInputValue(name);\n                                    }}\n                                />\n                            ) : (\n                                <TextField\n                                    onChange={(e) =>\n                                        setInputValue(e.target.value)\n                                    }\n                                    defaultValue={name}\n                                    className={classes.input}\n                                    id=\"standard-basic\"\n                                />\n                            )}\n                            {selected === id && (\n                                <LocationActions\n                                    formType={formType}\n                                    id={id}\n                                    value={inputValue}\n                                />\n                            )}\n                        </ListItem>\n                    ))}\n            </List>\n        </Paper>\n    );\n};\n\nexport default LocationList;\n","import React from 'react';\nimport {useDispatch} from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputBase from '@material-ui/core/InputBase';\n\nimport {changePlace, changeCity} from 'store/ducks/form';\n\nconst useStyles = makeStyles((theme) => ({\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n        padding: \"0 30px\"\n    },\n}));\n\nconst LocationTextField = ({formType, placeholder}) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const handleChangeText = (e) => {\n        formType === 'Place'\n        ? dispatch(changePlace(e.target.value))\n        : dispatch(changeCity(e.target.value));\n    };\n\n\n    return (\n        <InputBase\n            type=\"search\"\n            name={formType}\n            className={classes.input}\n            placeholder={placeholder}\n            onChange={(e) => handleChangeText(e)}\n            inputProps={{ 'aria-label': 'search' }}\n        />\n    );\n};\n\nexport default LocationTextField;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { IconButton, Divider } from '@material-ui/core';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\nimport { cityMaxId, addCity } from 'store/ducks/city';\nimport { placeMaxId, addPlace, selectSelectedPlace } from 'store/ducks/place';\nimport { selectSearchedPlace, selectSearchedCity } from 'store/ducks/form';\n\nconst useStyles = makeStyles(() => ({\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n}));\n\nconst LocationFormActions = ({ formType }) => {\n    const classes = useStyles();\n    const nextIdCity = parseInt(useSelector(cityMaxId)) + 1;\n    const nextIdPlace = parseInt(useSelector(placeMaxId)) + 1;\n    const selectedPlaceId = useSelector(selectSelectedPlace).id;\n    const searchedPlace = useSelector(selectSearchedPlace);\n    const searchedCity = useSelector(selectSearchedCity);\n\n    const dispatch = useDispatch();\n\n    const AddDispatchFunction = () =>\n        formType === 'Place'\n            ? addPlace(nextIdPlace, searchedPlace)\n            : addCity(nextIdCity, selectedPlaceId, searchedCity);\n\n    return (\n        <>\n            <Divider className={classes.divider} orientation=\"vertical\" />\n            <IconButton\n                color=\"primary\"\n                className={classes.iconButton}\n                aria-label=\"directions\"\n                onClick={() => dispatch(AddDispatchFunction())}\n            >\n                <AddCircleIcon />\n            </IconButton>\n        </>\n    );\n};\n\nexport default LocationFormActions;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Paper from '@material-ui/core/Paper';\nimport LocationTextField from './LocationTextField';\nimport LocationFormActions from './LocationFormActions';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        marginBottom: '10px',\n    },\n}));\n\nconst LocationForm = ({ formType }) => {\n    const classes = useStyles();\n\n    return (\n        <Paper component=\"form\" className={classes.root}>\n            <LocationTextField\n                placeholder={formType === 'Place' ? 'Type the state...' : 'Type the city...' }\n                formType={formType}\n            />\n            <LocationFormActions formType={formType}/>\n        </Paper>\n    );\n};\n\nexport default LocationForm;\n","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\n\nimport {\n    selectPlaces,\n    changePlace,\n    selectSelectedPlace,\n} from 'store/ducks/place';\n\nimport LocationList from '../LocationList/index';\nimport LocationForm from '../LocationForm/index';\n\nconst Places = () => {\n\n    const places = useSelector(selectPlaces);\n    const selectedPlace = useSelector(selectSelectedPlace);\n    const dispatch = useDispatch();\n\n    const handleChangePlace = useCallback(\n        (id, name) => dispatch(changePlace(id, name)),\n        [dispatch]\n    );\n\n    return (\n        <Grid item xs={6}>\n            <LocationForm formType={'Place'}/>\n            {places && <LocationList\n                formType={'Place'}\n                locations={places}\n                changeLocale={handleChangePlace}\n                selected={selectedPlace.id}\n            />}\n        </Grid>\n    );\n};\n\nexport default Places;\n","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\n\nimport { selectedCitiesByPlace, changeCity, selectSelectedCity } from 'store/ducks/city';\nimport { selectSelectedPlace } from 'store/ducks/place';\nimport LocationList from '../LocationList/index';\nimport LocationForm from '../LocationForm/index';\n\nconst Cities = () => {\n    const selectedPlace = useSelector(selectSelectedPlace);\n    const selectedCity = useSelector(selectSelectedCity);\n\n    const cities = useSelector((state) =>\n        selectedCitiesByPlace(state, selectedPlace.id)\n    );\n\n    const dispatch = useDispatch();\n\n    const handleChangeCity = useCallback(\n        (id, name) => dispatch(changeCity(id, name)),\n        [dispatch]\n    );\n\n    return (\n        <Grid item xs={6}>\n                <>  {selectedPlace &&\n                        <LocationForm formType={'City'} />}\n                    {cities.length > 0 && (\n                    <LocationList\n                        formType={'City'}\n                        locations={cities}\n                        changeLocale={handleChangeCity}\n                        selected={selectedCity.id}\n                    />)}\n                </>\n\n        </Grid>\n    );\n};\n\nexport default Cities;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport Places from '../Places/index';\nimport Cities from '../Cities/index';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        flexGrow: 1,\n    },\n}));\n\nconst CitiesAndPlacesContainer = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                <Places />\n                <Cities />\n            </Grid>\n        </div>\n    );\n};\n\nexport default CitiesAndPlacesContainer;\n","import React from 'react';\nimport Chart from 'react-google-charts';\nimport { useSelector } from 'react-redux';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { selectPlaces } from 'store/ducks/place';\nimport { selectCities } from 'store/ducks/city';\n\nimport { Paper, Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(2),\n        display: 'grid',\n        color: theme.palette.text.secondary,\n        marginTop: '50px',\n    },\n}));\n\nconst GeoChart = () => {\n    const classes = useStyles();\n    const places = useSelector(selectPlaces);\n    const cities = useSelector(selectCities);\n\n    let placesData = places.map((place) => [\n        place.name,\n        cities.filter((city) => place.id === city.placeId && city.name).length,\n    ]);\n\n    return (\n        <Grid item xs={12}>\n            <Paper elevation={3} className={classes.paper}>\n                <Chart\n                    style={{ justifySelf: 'center' }}\n                    width={'600px'}\n                    height={'300px'}\n                    chartType=\"Bar\"\n                    loader={<div>Loading Chart</div>}\n                    data={[['States', 'Qt. Cities'], ...placesData]}\n                    options={{\n                        chart: {\n                            title: 'City by number of states',\n                            subtitle:\n                                'Display de number of states of each city',\n                        },\n                    }}\n                />\n            </Paper>\n        </Grid>\n    );\n};\nexport default GeoChart;\n","import React from 'react';\n\nimport CitiesAndPlacesContainer from '../components/CitiesAndPlacesContainer';\nimport GeoChart from '../components/GeoChart';\n\nconst Home = () => (\n    <>\n        <CitiesAndPlacesContainer />\n        <GeoChart />\n    </>\n);\n\nexport default Home;\n","import React from 'react';\nimport { Container } from '@material-ui/core/';\nimport Home from './Home';\n\nexport const App = () => (\n    <Container fixed>\n        <Home />\n    </Container>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport cityReducer from './city';\nimport placeReducer from './place';\nimport formReducer from './form';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['city', 'place'],\n};\n\nconst rootReducer = combineReducers({\n    city: cityReducer,\n    place: placeReducer,\n    form: formReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer);\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport multi from 'redux-multi'\nimport { persistStore } from 'redux-persist';\n\nimport rootReducer from './ducks/root-reducer';\n\nconst middleWares = [logger, multi];\n\nexport const store = createStore(rootReducer, applyMiddleware(...middleWares));\nexport const persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport App from './pages/App';\nimport './index.css'\n\nimport { store, persistor } from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <PersistGate persistor={persistor}>\n            <App />\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}